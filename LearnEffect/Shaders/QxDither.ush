#include "/Engine/Private/Common.ush"

// Uniform Quantize
// 直接对输入的颜色根据阈值做二值化
float3 QxUniformQuantize(float3 inColor)
{
    return step( 0.5f, inColor);
}

// 随机颜色抖动
float3 Dither_Random(float3 inColor, float noise)
{
    return  step(0.5f, inColor + noise);
}

// blockXY 在当前block中的坐标，不超过block的宽度,这里是2
float Dither2x2Bayer(int2 blockXY, float brightness)
{
    const float dither[4] =
        {
            0, 2,
            3, 1
        };
    int r = blockXY.y * 2 + blockXY.x;
    return step(dither[r], brightness);
}

float Dither4x4Bayer(int2 blockXY, float brightness)
{
    const float dither[16] = {
        0, 8, 2, 10,
        12, 4, 14, 6,
        3, 11, 1, 9,
        15, 7, 13, 5
    };
    int index = blockXY.y * 4 + blockXY.x;
    return step(dither[index], brightness);
}

float Dither8x8Bayer(int2 blockXY, float brightness)
{
    const float dither[64] = {
        1, 49, 13, 61, 4, 52, 16, 64,
        33, 17, 45, 29, 36, 20, 48, 32,
        9, 57, 5, 53, 12, 60, 8, 56,
        41, 25, 37, 21, 44, 28, 40, 24,
        3, 51, 15, 63, 2, 50, 14, 62,
        35, 19, 47, 31, 34, 18, 46, 30,
        11, 59, 7, 55, 10, 58, 6, 54,
        43, 27, 39, 23, 42, 26, 38, 22
        };
    int index = blockXY.y * 8 + blockXY.x;
    return step(dither[index], brightness);
}

// 这里是测试为目的的，不要直接用到生产环境中
float3 Dither2x2Bayer(float2 pixelSpacePos, float3 inColor)
{
    float3 resColor;
    int2 blockXY = pixelSpacePos % 2;
    
    //假设输入的颜色是每个通道8bit
    int3 colorCompressed = inColor * 256;
    colorCompressed >>= 2; // 这里的2意思是压缩2bit
    
    resColor.r =  Dither2x2Bayer(blockXY, colorCompressed.r);
    resColor.g =  Dither2x2Bayer(blockXY, colorCompressed.g);
    resColor.b =  Dither2x2Bayer(blockXY, colorCompressed.b);
    return resColor;
}


// 这里是测试为目的的，不要直接用到生产环境中
float3 Dither8x8Bayer(float2 pixelSpacePos, float3 inColor)
{
    float3 resColor;
    int2 blockXY = pixelSpacePos % 8;
    
    //假设输入的颜色是每个通道8bit
    int3 colorCompressed = inColor * 256;
    colorCompressed >>= 2; // 这里的2意思是压缩2bit
    
    resColor.r =  Dither8x8Bayer(blockXY, colorCompressed.r);
    resColor.g =  Dither8x8Bayer(blockXY, colorCompressed.g);
    resColor.b =  Dither8x8Bayer(blockXY, colorCompressed.b);
    return resColor;
}
