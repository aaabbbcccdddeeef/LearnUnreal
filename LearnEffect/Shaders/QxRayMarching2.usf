#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

#define MAX_DIST 10000.0
#define MAX_STEPS 100
#define EPSILON 0.0001

struct QxRayMarcher
{

    float sdPlane( float3 p )
    {
        return p.y;
    }

    float sdSphere( float3 p, float s )
    {
        return length(p)-s;
    }

    float sdBox( float3 p, float3 b )
    {
        float3 d = abs(p) - b;
        return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
    }

    float sdEllipsoid( in float3 p, in float3 r )
    {
        return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);
    }

    float udRoundBox( float3 p, float3 b, float r )
    {
        return length(max(abs(p)-b,0.0))-r;
    }

    float sdTorus( float3 p, float2 t )
    {
        return length( float2(length(p.xz)-t.x,p.y) )-t.y;
    }

    float sdHexPrism( float3 p, float2 h )
    {
        float3 q = abs(p);
    #if 0
        return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);
    #else
        float d1 = q.z-h.y;
        float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;
        return length(max(float2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    #endif
    }

    float sdCapsule( float3 p, float3 a, float3 b, float r )
    {
        float3 pa = p-a, ba = b-a;
        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
        return length( pa - ba*h ) - r;
    }

    float sdEquilateralTriangle(  in float2 p )
    {
        const float k = 1.73205;//sqrt(3.0);
        p.x = abs(p.x) - 1.0;
        p.y = p.y + 1.0/k;
        if( p.x + k*p.y > 0.0 ) p = float2( p.x - k*p.y, -k*p.x - p.y )/2.0;
        p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );
        return -length(p)*sign(p.y);
    }

    float sdTriPrism( float3 p, float2 h )
    {
        float3 q = abs(p);
        float d1 = q.z-h.y;
    #if 1
        // distance bound
        float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;
    #else
        // correct distance
        h.x *= 0.866025;
        float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;
    #endif
        return length(max(float2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    }

    float sdCylinder( float3 p, float2 h )
    {
    float2 d = abs(float2(length(p.xz),p.y)) - h;
    return min(max(d.x,d.y),0.0) + length(max(d,0.0));
    }

    float sdCone( in float3 p, in float3 c )
    {
        float2 q = float2( length(p.xz), p.y );
        float d1 = -q.y-c.z;
        float d2 = max( dot(q,c.xy), q.y);
        return length(max(float2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    }

    float sdConeSection( in float3 p, in float h, in float r1, in float r2 )
    {
        float d1 = -p.y - h;
        float q = p.y - h;
        float si = 0.5*(r1-r2)/h;
        float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );
        return length(max(float2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    }

    float sdPryamid4(float3 p, float3 h )
    {
        // Tetrahedron = Octahedron - Cube
        float box = sdBox( p - float3(0,-2.0*h.z,0), float3(2.0*h.z,2.0*h.z,2.0*h.z) );
    
        float d = 0.0;
        d = max( d, abs( dot(p, float3( -h.x, h.y, 0 )) ));
        d = max( d, abs( dot(p, float3(  h.x, h.y, 0 )) ));
        d = max( d, abs( dot(p, float3(  0, h.y, h.x )) ));
        d = max( d, abs( dot(p, float3(  0, h.y,-h.x )) ));
        float octa = d - h.z;
        return max(-box,octa);
    }

    float Distance2( float2 p )
    {
        return sqrt( p.x*p.x + p.y*p.y );
    }

    float length6( float2 p )
    {
        p = p*p*p; p = p*p;
        return pow( p.x + p.y, 1.0/6.0 );
    }

    float length8( float2 p )
    {
        p = p*p; p = p*p; p = p*p;
        return pow( p.x + p.y, 1.0/8.0 );
    }

    float sdTorus82( float3 p, float2 t )
    {
        float2 q = float2(Distance2(p.xz)-t.x,p.y);
        return length8(q)-t.y;
    }

    float sdTorus88( float3 p, float2 t )
    {
        float2 q = float2(length8(p.xz)-t.x,p.y);
        return length8(q)-t.y;
    }

    float sdCylinder6( float3 p, float2 h )
    {
        return max( length6(p.xz)-h.x, abs(p.y)-h.y );
    }

    //------------------------------------------------------------------

    float opS( float d1, float d2 )
    {
        return max(-d2,d1);
    }

    float2 opU( float2 d1, float2 d2 )
    {
        return (d1.x<d2.x) ? d1 : d2;
    }

    float3 opRep( float3 p, float3 c )
    {
        return p-c*floor(p/c)-0.5*c;
    }

    float3 opTwist( float3 p )
    {
        float  c = cos(10.0*p.y+10.0);
        float  s = sin(10.0*p.y+10.0);
        float2x2 m = {c,-s,s,c};
        return float3(mul(m,p.xz),p.y);
    }

    //------------------------------------------------------------------

    float2 map( in float3 pos )
    {
        float2 res = opU( float2( sdPlane(pos), 1.0 ),float2( sdSphere(pos-float3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );
        res = opU( res, float2( sdBox(pos-float3( 1.0,0.25, 0.0), float3(0.25,0.25,0.25) ), 3.0 ) );
        res = opU( res, float2( udRoundBox(pos-float3( 1.0,0.25, 1.0), float3(0.15,0.15,0.15), 0.1 ), 41.0 ) );
        res = opU( res, float2( sdTorus(pos-float3( 0.0,0.25, 1.0), float2(0.20,0.05) ), 25.0 ) );
        res = opU( res, float2( sdCapsule(pos,float3(-1.3,0.10,-0.1), float3(-0.8,0.50,0.2), 0.1  ), 31.9 ) );
        res = opU( res, float2( sdTriPrism(pos-float3(-1.0,0.25,-1.0), float2(0.25,0.05) ),43.5 ) );
        res = opU( res, float2( sdCylinder(pos-float3( 1.0,0.30,-1.0), float2(0.1,0.2) ), 8.0 ) );
        res = opU( res, float2( sdCone(pos-float3( 0.0,0.50,-1.0), float3(0.8,0.6,0.3) ), 55.0 ) );
        res = opU( res, float2( sdTorus82(pos-float3( 0.0,0.25, 2.0), float2(0.20,0.05) ),50.0 ) );
        res = opU( res, float2( sdTorus88(pos-float3(-1.0,0.25, 2.0), float2(0.20,0.05) ),43.0 ) );
        res = opU( res, float2( sdCylinder6(pos-float3( 1.0,0.30, 2.0), float2(0.1,0.2) ), 12.0 ) );
        res = opU( res, float2( sdHexPrism(pos-float3(-1.0,0.20, 1.0), float2(0.25,0.05) ),17.0 ) );
        res = opU( res, float2( sdPryamid4(pos-float3(-1.0,0.15,-2.0), float3(0.8,0.6,0.25) ),37.0 ) );
        res = opU( res, float2( opS(udRoundBox(pos-float3(-2.0,0.2, 1.0), float3(0.15,0.15,0.15),0.05), sdSphere(pos-float3(-2.0,0.2, 1.0), 0.25)), 13.0 ) );
        res = opU( res, float2( opS( sdTorus82(pos-float3(-2.0,0.2, 0.0), float2(0.20,0.1)),sdCylinder(opRep( float3(atan2(pos.x+2.0,pos.z)/6.2831, pos.y, 0.02+0.5*length(pos-float3(-2.0,0.2, 0.0))), float3(0.05,1.0,0.05)), float2(0.02,0.6))), 51.0 ) );
        res = opU( res, float2( 0.5*sdSphere(pos-float3(-2.0,0.25,-1.0), 0.2 ) + 0.03*sin(50.0*pos.x)*sin(50.0*pos.y)*sin(50.0*pos.z), 65.0 ) );
        res = opU( res, float2( 0.5*sdTorus(opTwist(pos-float3(-2.0,0.25, 2.0)),float2(0.20,0.05)), 46.7 ) );
        res = opU( res, float2( sdConeSection(pos-float3( 0.0,0.35,-2.0), 0.15, 0.2, 0.1 ), 13.67 ) );
        res = opU( res, float2( sdEllipsoid(pos-float3( 1.0,0.35,-2.0), float3(0.15, 0.2, 0.05) ), 43.17 ) );
            
        return res;
    }

    float boundingBoxSDF( float3 p, float3 b, float e ) {
        p = abs(p)-b;
        float3 q = abs(p+e)-e;
        return min(min(
            length(max(float3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),
            length(max(float3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),
            length(max(float3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));
    }
    float sphereSDF( float3 pos, float radius) {
        return length(pos) - radius;
    }

    float mandelbulbSDF( float3 p, float power ) {
        float3 w = p;
        float m = dot(w,w);
        float dz = 1.0;

        for( int i=0; i<3; i++ )
        {
            dz = power*pow(sqrt(m), power - 1.0 )*dz + 1.0;

            float r = length(w);
            float b = power*acos( w.y/r);
            float a = power*atan2( w.x, w.z );
            w = p + pow(r,power) * float3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );

            m = dot(w,w);
            if( m > 256.0 )
                break;
        }

        return 0.25*log(m)*sqrt(m)/dz;
    }

    float sceneSDF( float3 pos ) {
        // float sphere = sphereSDF(pos, 40.0);
        // float box = boundingBoxSDF(pos, float3( 30.0, 30.0, 30.0 ), 5.0);
        // return lerp( sphere, box, 0.5 + sin(View.GameTime)/2 );
         return mandelbulbSDF( pos, 7.0 );
    }

    // Output : Distance to closet surface along ray
    float raymarch(float3 camPos, float3 rayDir)
    {
        float depth = 0;

        for(int i = 0; i < MAX_STEPS; i++)
        {
            // 计算沿ray 的点
            float3 pos = camPos + (rayDir * depth);

            // 计算pos位置的sdf
            float dist = sceneSDF(pos);

            depth += dist;
            // finish when very close to surface or ray too far
            if(dist <= EPSILON || dist > MAX_DIST)
            {
                break;
            }
        }
        return depth;
    }



    float3 estimateNormals(float3 pos)
    {
        return normalize( float3(
            sceneSDF(float3( pos.x + EPSILON, pos.yz ) )
            - sceneSDF(float3( pos.x - EPSILON, pos.yz) ),
            sceneSDF( float3( pos.x, pos.y + EPSILON, pos.z) )
            - sceneSDF( float3( pos.x, pos.y - EPSILON, pos.z ) ),
            sceneSDF( float3(pos.xy, pos.z + EPSILON) )
            - sceneSDF( float3( pos.xy, pos.z - EPSILON ) )
        ) );
    }

    float4 render(float3 camPos, float3 rayDir)
    {
        //return float4(0, 0, 1, 1);
        float depth = raymarch(camPos, rayDir);

        if(depth >= MAX_DIST)
        {
            return float4(0, 0, 0, 0);
        }

        float3 lightDir = -normalize(float3(-0.3, - 1.0, -0.3));
        float3 diffuseColor = float3(0.8, 0.2, 0.0);


        float3 pos = camPos + (rayDir * depth);
        float3 normal = estimateNormals(pos);
        float diffuseLight = saturate(dot(lightDir, normal));
        
        float ambientLight = 0.1;

        float3 reflectDir = reflect(-lightDir, normal);
        float specular = pow( saturate(dot(reflectDir, -rayDir)), 16.0 );

        float3 result = diffuseColor * (diffuseLight + ambientLight) + specular;
        return float4(result, 1);
    }
};

