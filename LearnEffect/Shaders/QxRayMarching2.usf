#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

#define MAX_DIST 10000.0
#define MAX_STEPS 100
#define EPSILON 0.0001

struct QxRayMarcher
{
    float boundingBoxSDF( float3 p, float3 b, float e ) {
        p = abs(p)-b;
        float3 q = abs(p+e)-e;
        return min(min(
            length(max(float3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),
            length(max(float3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),
            length(max(float3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));
    }
    float sphereSDF( float3 pos, float radius) {
        return length(pos) - radius;
    }

    float mandelbulbSDF( float3 p, float power ) {
        float3 w = p;
        float m = dot(w,w);
        float dz = 1.0;

        for( int i=0; i<3; i++ )
        {
            dz = power*pow(sqrt(m), power - 1.0 )*dz + 1.0;

            float r = length(w);
            float b = power*acos( w.y/r);
            float a = power*atan2( w.x, w.z );
            w = p + pow(r,power) * float3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );

            m = dot(w,w);
            if( m > 256.0 )
                break;
        }

        return 0.25*log(m)*sqrt(m)/dz;
    }

    float sceneSDF( float3 pos ) {
        // float sphere = sphereSDF(pos, 40.0);
        // float box = boundingBoxSDF(pos, float3( 30.0, 30.0, 30.0 ), 5.0);
        // return lerp( sphere, box, 0.5 + sin(View.GameTime)/2 );
         return mandelbulbSDF( pos, 7.0 );
    }

    // Output : Distance to closet surface along ray
    float raymarch(float3 camPos, float3 rayDir)
    {
        float depth = 0;

        for(int i = 0; i < MAX_STEPS; i++)
        {
            // 计算沿ray 的点
            float3 pos = camPos + (rayDir * depth);

            // 计算pos位置的sdf
            float dist = sceneSDF(pos);

            depth += dist;
            // finish when very close to surface or ray too far
            if(dist <= EPSILON || dist > MAX_DIST)
            {
                break;
            }
        }
        return depth;
    }



    float3 estimateNormals(float3 pos)
    {
        return normalize( float3(
            sceneSDF(float3( pos.x + EPSILON, pos.yz ) )
            - sceneSDF(float3( pos.x - EPSILON, pos.yz) ),
            sceneSDF( float3( pos.x, pos.y + EPSILON, pos.z) )
            - sceneSDF( float3( pos.x, pos.y - EPSILON, pos.z ) ),
            sceneSDF( float3(pos.xy, pos.z + EPSILON) )
            - sceneSDF( float3( pos.xy, pos.z - EPSILON ) )
        ) );
    }

    float4 render(float3 camPos, float3 rayDir)
    {
        //return float4(0, 0, 1, 1);
        float depth = raymarch(camPos, rayDir);

        if(depth >= MAX_DIST)
        {
            return float4(0, 0, 0, 0);
        }

        float3 lightDir = -normalize(float3(-0.3, - 1.0, -0.3));
        float3 diffuseColor = float3(0.8, 0.2, 0.0);

        float3 normal = estimateNormals(camPos + (rayDir * depth));
        float diffuseLight = saturate(dot(lightDir, normal));
        
        float ambientLight = 0.1;

        float3 reflectDir = reflect(-lightDir, normal);
        float specular = pow( saturate(dot(reflectDir, -rayDir)), 16.0 );

        float3 result = diffuseColor * (diffuseLight + ambientLight) + specular;
        return float4(result, 1);
    }
};

