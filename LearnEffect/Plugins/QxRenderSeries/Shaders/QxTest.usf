#include "/Engine/Public/Platform.ush"
// #include "/Engine/Private/Common.ush"
// Simple pass-through vertex shader

void MainVS(
    in float4 InPosition : ATTRIBUTE0,
    in float2 InUV : ATTRIBUTE1, 
    out float2 OutUV : TEXCOORD0, //注意SV_POSITIONF放到VS最后的输出，否则之后的可能无法输出
    out float4 Output : SV_POSITION
)
{
    Output = InPosition;
    OutUV = InUV;
}

// Simple solid color pixel shader
float4 TestColor;

Texture2D MyTexture;
SamplerState MyTextureSampler;

float Sphere2DMask(float2 UV, float2 Center)
{
    float radius = 0.45f;
    return  length(UV - Center) - radius < 0; 
}

float4 MainPS(
    in float2 UV : TEXCOORD0
    ) : SV_Target0
{
    //return TestColor;
    float4 outColor = float4(MyTexture.Sample(MyTextureSampler, UV).rgb, 1.0f);

    // switch (FMyUniform.ColorIndex)
    // {
    //     case 0:
    //         outColor *= FMyUniform.ColorOne;
    //         break;
    //     case 1:
    //         outColor *= FMyUniform.ColorTwo;
    //         break;
    //     case 2:
    //         outColor *= FMyUniform.ColorThree;
    //         break;
    //     case 3:
    //         outColor *= FMyUniform.ColorFour;
    //         break;
    // }
    
    // outColor *= TestColor;
    // outColor = float4(0.f, 0.f, 1.f, 1.f);
    //Primitive
    // float3 test =View.WorldViewOrigin;
    // test = normalize(test);
    // outColor = outColor * float4(test, 1.f);
    float mask = Sphere2DMask(UV, float2(0.5f, 0.5f));
    // outColor *
    outColor = outColor * float4(1.f, 0.f, 0.f, 1.f) * (1 - mask);
    return outColor;
}