#ifndef __QxToneMappers
#define __QxToneMappers

#include "/Engine/Private/TonemapCommon.ush"

// 这里简写TMO是Tone Mapper Operator

float QxLuminance(float3 v)
{
	return dot(v, float3(0.2126f, 0.7152f, 0.0722f));
}


float3 Uncharted2Tonemap(float3 x)
{
	// http://www.gdcvault.com/play/1012459/Uncharted_2__HDR_Lighting
	// http://filmicgames.com/archives/75 - the coefficients are from here
	float A = 0.15; // Shoulder Strength
	float B = 0.50; // Linear Strength
	float C = 0.10; // Linear Angle
	float D = 0.20; // Toe Strength
	float E = 0.02; // Toe Numerator
	float F = 0.30; // Toe Denominator
	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F; // E/F = Toe Angle
}

// vec3 uncharted2_tonemap_partial(vec3 x)
// {
// 	float A = 0.15f;
// 	float B = 0.50f;
// 	float C = 0.10f;
// 	float D = 0.20f;
// 	float E = 0.02f;
// 	float F = 0.30f;
// 	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
// }

float3 uncharted2_filmic(float3 v)
{
	float exposure_bias = 2.0f;
	float3 curr = Uncharted2Tonemap(v * exposure_bias);

	float3 W = float3(11.2f, 11.2f, 11.2f);
	float3 white_scale = float3(1.0f, 1.f, 1.f) / Uncharted2Tonemap(W);
	return curr * white_scale;
}

float3 reinhard(float3 v)
{
	return v / (1.f + v);
}

float3 ReinhardExtended(float3 v, float MaxWhite)
{
	float whiteSquare = MaxWhite * MaxWhite;
	float3 numerator = v * (1.0f + (v / float3(whiteSquare, whiteSquare, whiteSquare)));
	return numerator / (1.0f + v);
}




float3 change_luminance(float3 c_in, float l_out)
{
	float l_in = QxLuminance(c_in);
	return c_in * (l_out / l_in);
}


float3 reinhard_extended_luminance(float3 v, float max_white_l)
{
	float l_old = QxLuminance(v);
	float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));
	float l_new = numerator / (1.0f + l_old);
	return change_luminance(v, l_new);
}

float3 reinhard_jodie(float3 v)
{
	float l = QxLuminance(v);
	float3 tv = v / (1.0f + v);
	return lerp(v / (1.0f + l), tv, tv);
}


//--------- ACES Tone Mapper ---------
static const float3x3 aces_input_matrix =
{
	float3(0.59719f, 0.35458f, 0.04823f),
	float3(0.07600f, 0.90834f, 0.01566f),
	float3(0.02840f, 0.13383f, 0.83777f)
};

static const float3x3 aces_output_matrix =
{
	float3( 1.60475f, -0.53108f, -0.07367f),
	float3(-0.10208f,  1.10813f, -0.00605f),
	float3(-0.00327f, -0.07276f,  1.07602f)
};

float3 mul(float3x3 m, float3 v)
{
	float x = m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2];
	float y = m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2];
	float z = m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2];
	return float3(x, y, z);
}

float3 rtt_and_odt_fit(float3 v)
{
	float3 a = v * (v + 0.0245786f) - 0.000090537f;
	float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
	return a / b;
}

float3 aces_fitted(float3 v)
{
	v = mul(aces_input_matrix, v);
	v = rtt_and_odt_fit(v);
	return mul(aces_output_matrix, v);
}

float3 aces_approx(float3 v)
{
	v *= 0.6f;
	float a = 2.51f;
	float b = 0.03f;
	float c = 2.43f;
	float d = 0.59f;
	float e = 0.14f;
	return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
}
//---------End ACES Tone Mapper ---------


#endif