#include "/Engine/Private/Common.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"
// 当前文件的实现大部分是参考LidarPointCloudVertexFactory.ush

// First half is normal, second half has inverted V
static float2 PrecomputedUV_Quad[8] = { float2(-0.5, -0.5), float2(0.5, -0.5), float2(0.5, 0.5), float2(-0.5, 0.5), float2(0, 1), float2(1, 1), float2(1, 0), float2(0, 0) };


half3 Tint;
half4 Contrast;
half4 Saturation;

/**
 * [Tx, Ty, Tz, Invert]
 * [Fx, Fy, Fz, Ex]
 * [Rx, Ry, Rz, Ey]
 * [Ux, Uy, Uz, Ez]
 */
float4x4 ClippingVolumeBuffer[16];
uint NumClippingVolumes;
uint bStartClipped;

// Needed for WPO calculations
float3 ViewRightVector;
float3 ViewUpVector;


struct FVertexFactoryInput
{
    float4 Position : ATTRIBUTE0;
    half4 Color : ATTRIBUTE1;
    uint MetaData : ATTRIBUTE2;
    uint VertexId : SV_VertexId;
};

struct FPositionOnlyVertexFactoryInput
{
    float4 Position : ATTRIBUTE0;
    uint VertexId : SV_VertexId;
};

struct FPositionAndNormalOnlyVertexFactoryInput
{
    float4 Position : ATTRIBUTE0;
    float4 Normal : ATTRIBUTE1;
    uint VertexId : SV_VertexId;
};

struct FVertexFactoryInterpolantsVSToPS
{
    TANGENTTOWORLD_INTERPOLATOR_BLOCK // 这先参照点云的vf加了tangents，但qx procedural mesh未必需要
    half4 Color : COLOR0;
    float2 TexCoords : TEXCOORD0;
};

struct FVertexFactoryIntermediates
{
    half3x3 TangentToLocal;
    half3x3 TangentToWorld;
    half TangentToWorldSign;
    half4 Color;
    float3 Position;
    half2 Scale;
    float SpriteSize;
};

struct FQxProceduralIntanceData
{
    float3 Position;
    uint Color;
    uint bSelected;
    half3x3 TangentToLocal;
    float SpriteSize;
};

float3 ApplyClipping(float3 Position)
{
    bool bClip = bStartClipped;
    for (uint i = 0; i < NumClippingVolumes; ++i)
    {
        float3 DeltaPosition = TransformLocalToWorld(Position).xyz - ClippingVolumeBuffer[i][0].xyz; // 这里是定制化的矩阵，第一行用来表示center
        bool bInsideClippingBox = abs(dot(DeltaPosition, ClippingVolumeBuffer[i][1].xyz)) <= ClippingVolumeBuffer[i][1].w
            && abs(dot(DeltaPosition, ClippingVolumeBuffer[i][2].xyz)) <= ClippingVolumeBuffer[i][2].w
            && abs(dot(DeltaPosition, ClippingVolumeBuffer[i][3].xyz)) <= ClippingVolumeBuffer[i][3].w;
        if (ClippingVolumeBuffer[i][0][3] == 1) // 用这个数值表示是不是inverset clipping
        {
            if (bInsideClippingBox)
            {
                bClip = true;
            }
        }
        else
        {
            if (bInsideClippingBox)
            {
                bClip = false;
            }
        }
    }

    // 这里参考LidarPointCloudFactory的Apply Clipping的方法， 下面的0/0的意图不太明确 #TODO
    return bClip ? (0.0f / 0) : Position;
}

float3 CalcPosition(float3 Position)
{
    // return ApplyClipping(Position + Lo)
    return  ApplyClipping(Position);
}

half3x3 CalcTangentToLocal(uint Metadata)
{
    half3x3 TangetToLocal;
    const bool bUseCameraFacing = true;
    // In this mode, [0] and [1] are only really used for scaling
    TangetToLocal[0] = ViewRightVector;
    TangetToLocal[1] =  ViewUpVector;

    // // Hardcoded to have the lighting behave more correctly
    TangetToLocal[2] = float3(0, 0, 1);
    
    return  TangetToLocal;
}

half3x3 CalcTangentToWorldNoScale(in half3x3 TangentToLocal)
{
    half3x3 LocalToWorld = GetLocalToWorld3x3();
    half3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
    LocalToWorld[0] *= InvScale.x;
    LocalToWorld[1] *= InvScale.y;
    LocalToWorld[2] *= InvScale.z;
    return mul(TangentToLocal, LocalToWorld);
}

float CalcSpriteSize(float3 Position)
{
    return  100; //#TODO 
}

FVertexFactoryIntermediates GetFVertexFactoryIntermediates(FVertexFactoryInput Input)
{
    half3 Color;
    half Intensity;
    float SpriteSize;
    
    FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0; // 之前看到yanvilee 渲染编程系列推荐这种初始化方式
    Intermediates.Position = CalcPosition(Input.Position.xyz);
    Intermediates.TangentToLocal = CalcTangentToLocal(Input.MetaData);
    
    uint MetaData = 0x000000FF & (Input.MetaData >> 24);
    SpriteSize = CalcSpriteSize(Intermediates.Position);

    Color = Input.Color.rgb;
    Intensity = Input.Color.a;
    Intermediates.SpriteSize = SpriteSize;

    Intermediates.SpriteSize = SpriteSize;
    Intermediates.Scale = PrecomputedUV_Quad[Input.VertexId % 4];
    Intermediates.TangentToWorldSign = Primitive.InvNonUniformScaleAndDeterminantSign.w;
    Intermediates.TangentToWorld = CalcTangentToWorldNoScale(Intermediates.TangentToLocal);
    Intermediates.Color = half4(1.f, 0.f, 0.f, 1.f);
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(
    FVertexFactoryInput Input
    )
{
    FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;

    Intermediates.Position = CalcPosition(Input.Position.xyz);
    Intermediates.TangentToLocal = CalcTangentToLocal(Input.MetaData);

    uint MetaData = 0x000000FF & (Input.MetaData >> 24);

    float SpriteSize = CalcSpriteSize(Intermediates.SpriteSize);
    half3 Color = Input.Color.rgb;
    float Intensity = Input.Color.a;

    Intermediates.SpriteSize = SpriteSize;
    Intermediates.Scale = PrecomputedUV_Quad[Input.VertexId % 4];
    Intermediates.TangentToWorldSign = Primitive.InvNonUniformScaleAndDeterminantSign.w;
    Intermediates.TangentToWorld = CalcTangentToWorldNoScale(Intermediates.TangentToLocal);
    Intermediates.Color = half4(1, 0, 0, 1); 
    
    return Intermediates;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates,
    FMaterialVertexParameters VertexParameters)
{
    FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
    Interpolants.TangentToWorld0 = float4(Intermediates.TangentToWorld[0], 0);
    Interpolants.TangentToWorld2 = float4(Intermediates.TangentToLocal[2], Intermediates.TangentToWorldSign);
    Interpolants.Color = VertexParameters.VertexColor;
    Interpolants.TexCoords = PrecomputedUV_Quad[Input.VertexId % 4 + 4];

    return  Interpolants;
}

half3x3 VertexFactoryGetTangentToLocal(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates
    )
{
    return  Intermediates.TangentToLocal;
}

float3 ProcessPosition(
    float3 Position,
    half3x3 TangentToLocal,
    half2 Scale,
    float SpriteSize
    )
{
    float Size = SpriteSize;
    return Position + (TangentToLocal[0] * Scale.x + TangentToLocal[1] * Scale.y) * Size;
}

float3 ProcessPosition(
    float3 Position,
    half2 Scale
    )
{
    half3x3 TangentToLocal;
    TangentToLocal[0] = ViewRightVector;
    TangentToLocal[1] = ViewUpVector;
    return ProcessPosition(Position, TangentToLocal, Scale, CalcSpriteSize(Position));
}

float4 VertexFactoryGetWorldPosition(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates
    )
{
    float4 WorldPosition = TransformLocalToTranslatedWorld(Intermediates.Position);
    WorldPosition.xyz = ProcessPosition(WorldPosition.xyz, Intermediates.TangentToLocal,
        Intermediates.Scale, Intermediates.SpriteSize);
    return WorldPosition;
}

float4 VertexFactoryGetWorldPosition(
    FPositionOnlyVertexFactoryInput Input
    )
{
    float4 WorldPosition = TransformLocalToTranslatedWorld(CalcPosition(Input.Position.xyz));
    WorldPosition.xyz = ProcessPosition(WorldPosition.xyz, PrecomputedUV_Quad[Input.VertexId % 4]);
    return WorldPosition;
}

float3 VertexFactoryGetWorldNormal(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates
    )
{
    return Intermediates.TangentToWorld[2];
}

// 获得前一帧的translated world position,这个在计算velocity buffer/taa的时候有用??
float4 VertexFactoryGetPreviousWorldPosition(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates
    )
{
    float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(0).PreviousLocalToWorld;

    //#TODO PrevPreviewTranslation这个参数和ue4 shader中的矩阵弄明白
    PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
    PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
    PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;

    return mul(float4(Intermediates.Position, 1.f), PreviousLocalToWorldTranslated);
}

float4 VertexFactoryGetRasterizedWorldPosition(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates,
    float4 InWorldPosition
    )
{
    return InWorldPosition;
}

float3 VertexFactoryGetWorldNormal(
    FPositionAndNormalOnlyVertexFactoryInput Input
    )
{
    return  RotateLocalToWorld(Input.Normal.xyz);
}

float4 VertexFactoryGetWorldPosition(
    FPositionAndNormalOnlyVertexFactoryInput Input
    )
{
    float4 WorldPosition = TransformLocalToTranslatedWorld(CalcPosition(Input.Position.xyz), 0);
    WorldPosition.xyz = ProcessPosition(WorldPosition.xyz, PrecomputedUV_Quad[Input.VertexId % 4]);
    return WorldPosition;
}

// 将vertex factory的input转换成FMaterialVertexParameters，这个是作为vertex shader 的material inputs
FMaterialVertexParameters GetMaterialVertexParameters(
    FVertexFactoryInput Input,
    FVertexFactoryIntermediates Intermediates,
    float3 WorldPosition,
    half3x3 TangentToLocal
    )
{
    FMaterialVertexParameters Result = (FMaterialVertexParameters)0;

    Result.WorldPosition = WorldPosition;
    Result.TangentToWorld = Intermediates.TangentToWorld;
    Result.VertexColor = Intermediates.Color;

    return Result;
}

FMaterialPixelParameters GetMaterialPixelParameters(
    FVertexFactoryInterpolantsVSToPS Interpolants,
    float4 SvPosition
    )
{
    FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

    Result.Particle.Color = half4(1, 1, 1, 1);
    Result.TwoSidedSign = 1;
    Result.VertexColor = Interpolants.Color;
    Result.VertexColor.a = lerp(1, 1 - distance(Interpolants.TexCoords, 0.5), Interpolants.Color.a);

    
    return Result;
}


float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(
    FVertexFactoryInterpolantsVSToPS Interpolants)
{
    // return  float4(100, 100, 100, 1);
    return float4(Primitive.ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, Primitive.ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return  0;
}

