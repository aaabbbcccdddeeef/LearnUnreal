/*Using a screen pane uv coord to draw this lut texture
**Radius defualt value is equal to 1
**offset defualt value is equal to 0
*/
static const float VList[6] = {0.0064, 0.0484, 0.187, 0.567, 1.99, 7.41};
static const float3 ColorList[6] =
{
    float3(0.233, 0.455, 0.649),
    float3(0.1, 0.366, 0.344),
    float3(0.118, 0.198, 0),
    float3(0.113, 0.007, 0.007),
    float3(0.358, 0.004, 0),
    float3(0.078, 0, 0)
};

float3 CreatePreIntegratedSkinBRDF(float2 uv, float offset, float Radius)
{
	float PI = 3.14159265359;
	uv.x = 1 - uv.x;
	float Theta = (offset - uv.x) * PI;

	float3 A = 0;
	float3 B = 0;
	float x = -PI / 2;
	for (int i = 0; i < 1000; i++)
	{
		float step = 0.001;
  
		float dis = abs(2 * (1 / (1 - uv.y) * Radius) * sin(x * 0.5));
		float3 Guss0 = exp(-dis * dis / (2 * VList[0])) * ColorList[0];
		float3 Guss1 = exp(-dis * dis / (2 * VList[1])) * ColorList[1];
		float3 Guss2 = exp(-dis * dis / (2 * VList[2])) * ColorList[2];
		float3 Guss3 = exp(-dis * dis / (2 * VList[3])) * ColorList[3];
		float3 Guss4 = exp(-dis * dis / (2 * VList[4])) * ColorList[4];
		float3 Guss5 = exp(-dis * dis / (2 * VList[5])) * ColorList[5];
		float3 D = Guss0 + Guss1 + Guss2 + Guss3 + Guss4 + Guss5;

		A += saturate(cos(x + Theta)) * D;
		B += D;
		x += 0.01;

		if (x == (PI / 2))
		{
			break;
		}
	}
	float3 result = A / B;
	return result;
}

float3 Main(in float2 UV, in float Radius,
	in float offset)
{
	return CreatePreIntegratedSkinBRDF(UV, offset, Radius);
}