#include "Shared.ush"
// 参考文档的特殊的filtered kernel的down sample shader

float2 InputSize;

float3 DownSample(
	Texture2D Texture,
	SamplerState TextureSampler,
	float2 UV,
	float2 PixelSize
	)
{
	const float2 Coord[13] = {
		float2( -1.0f,  1.0f ), float2(  1.0f,  1.0f ),
		float2( -1.0f, -1.0f ), float2(  1.0f, -1.0f ),

		float2(-2.0f, 2.0f), float2( 0.0f, 2.0f), float2( 2.0f, 2.0f),
		float2(-2.0f, 0.0f), float2( 0.0f, 0.0f), float2( 2.0f, 0.0f),
		float2(-2.0f,-2.0f), float2( 0.0f,-2.0f), float2( 2.0f,-2.0f)
	};

	const float Weights[13] = {
		// 4 samples
		// (1 / 4) * 0.5f = 0.125f
		0.125f, 0.125f,
		0.125f, 0.125f,

		// 9 samples
		// (1 / 9) * 0.5f
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f
	};

	float3 OutColor = float3(0.f,0.f, 0.f);

	UNROLL
	for (int i = 0; i < 13; ++i)
	{
		float2 finalUV = UV + PixelSize * Coord[i];
		OutColor += Texture2DSample(Texture, TextureSampler, finalUV).rgb * Weights[i];
	}
	return OutColor;
}

void DownSamplePS(
	in noperspective float4 UVAndScreenPos : TEXCOORD0,
	out float3 OutColor : SV_TARGET0
	)
{
	// #TODO 这里为什么要 x 0.5f
	float2 InPixelSize = (1.0f / InputSize) * 0.5f;

	float2 UV = UVAndScreenPos.xy;
	OutColor.rgb = DownSample(InputTexture, InputTextureSampler, UV, InPixelSize);
}