#include "../Shared.ush"

Texture2D PreviousTexture;
float Radius;
float2 InputSize;

float3 Upsample(
	Texture2D InTexture,
	SamplerState InTextureSampler,
	float2 UV,
	float2 PixelSize
	)
{
	const float2 Coord[9] =
		{
		float2( -1.0f,  1.0f ), float2(  0.0f,  1.0f ), float2(  1.0f,  1.0f ),
		float2( -1.0f,  0.0f ), float2(  0.0f,  0.0f ), float2(  1.0f,  0.0f ),
		float2( -1.0f, -1.0f ), float2(  0.0f, -1.0f ), float2(  1.0f, -1.0f )
		};
	const float Weights[9] =
		{
		0.0625f, 0.125f, 0.0625f,
		0.125f,  0.25f,  0.125f,
		 0.0625f, 0.125f, 0.0625f
		};

	float3 Color = float3(0.f, 0.f, 0.f);

	UNROLL
	for (int i = 0; i < 9; ++i)
	{
		float2 CurrentUV = UV + Coords[i] * PixelSize;
		Color += Weights[i] * Texture2DSampleLevel(Texture, Sampler, CurrentUV, 0).rgb;
	}
	return Color;
}

void UpsampleCombinePS(
	in noperspective float4 UVAndScreenPos : TEXCOORD0,
	out float3 OutColor : SV_Target0
	)
{
	float2 InPixelSize = 1.0f / InputSize;
	float2 UV = UVAndScreenPos.xy;

	float3 CurrentColor = Texture2DSampleLevel(InputTexture,, InputTextureSampler, UV, 0).rgb;
	float3 PreviousColor = Upsample(PreviousTexture, InputTextureSampler, UV, InPixelSize);

	OutColor.rgb = lerp(CurrentColor, PreviousColor, Radius);
}

