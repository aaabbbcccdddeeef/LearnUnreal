#include "Shared.ush"

Texture2D BloomTexture;
Texture2D GlareTexture;
Texture2D GradientTexture;
SamplerState GradientTextureSampler;

float Intensity;
float4 Tint;
float2 BufferSize;
float2 PixelSize;
int3 MixPass;

void MixPS(
	in noperspective float4 UVAndScreenPos : TEXCOORD0,
	out float4 OutColor : SV_Target0
	)
{
	float2 UV = UVAndScreenPos.xy;
	OutColor = float4(0.f, 0.f, 0.f, 0.f);

	// Add Bloom
	if (MixPass.x)
	{
		OutColor.rgb += Texture2DSample(BloomTexture, InputTextureSampler,
			UV * InputViewportSize).rgb;
	}

	// Add Flares Glares mixed with Tint Gradient
	float3 Flares = float3(0.f, 0.f, 0.f);

	// Flares
	if (MixPass.y)
	{
		Flares += Texture2DSample(InputTexture, InputTextureSampler, UV).rgb;
	}

	// Glares
	// Do 4 samples in a square pattern to smooth the
	// glare pass result and hide a few artifacts.
	if (MixPass.z)
	{
		const float2 Coords[4] = {
			float2(-1.0f, 1.0f),
			float2( 1.0f, 1.0f),
			float2(-1.0f,-1.0f),
			float2( 1.0f,-1.0f)
		};

		float3 GlareColor = float3(0.f, 0.f, 0.f);

		UNROLL
		for (int i = 0; i < 4; ++i)
		{
			float2 OffsetUV = UV + PixelSize * Coords[i];
			GlareColor.rgb += 0.25f * Texture2DSample(GlareTexture, InputTextureSampler,
				OffsetUV).rgb;
		}

		Flares += GlareColor;
	}

	const float2 Center = float2(0.5f, 0.5f);
	float2 GradientUV = float2(
			saturate(distance(UV, Center) * 2.0f),
			0.0f
		);

	float3 Gradient = Texture2DSample(GradientTexture, GradientTextureSampler, GradientUV).rgb;

	// Final Mix
	OutColor.rgb += Flares * Gradient * Tint.rgb * Intensity;
}
